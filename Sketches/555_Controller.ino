/*******************************************************************************
       This is an example for using the X9Cxxx digital potentiometers
       in a 555 oscillator frequency control situation.

       By controlling the pot over I2C and changing the oscillator frequency,
       tones or sound effects can be generated by the 555.

       Hardware project:  https://github.com/GadgetReboot/GR_555_Controller
       Tested on Arduino Uno for I2C control
       Libraries used: PCF8574 https://github.com/RobTillaart/Arduino/tree/master/libraries/PCF8574

       Gadget Reboot

*******************************************************************************/


#include <Wire.h>
#include <PCF8574.h>
#define addr1  0x20    // pcf8574 device 1 I2C address
#define addr2  0x21    // pcf8574 device 2 I2C address

// create pcf8574 controller objects
PCF8574 gpioBank1(addr1);
PCF8574 gpioBank2(addr2);

// pcf8574 GPIO assignment for controls

#define CFG1     0     // 0 = on board resistor between 555 #2 discharge-threshold, 1 = bypass resistor
#define CFG2     1     // 0 = open, 1 = short between 555 #2 threshold-trigger
#define CFG3     2     // 0 = 555 #2 trigger unaffected, 1 = 555 #2 triggered from output of 555 #1
#define CTRL1a   3     // 0 = off, 1 = on  555 #1 main oscillator 
#define CTRL1b   4     // 0 = off, 1 = on  555 #1 sub oscillator 1
#define CTRL1c   5     // 0 = off, 1 = on  555 #1 sub oscillator 2
#define CTRL2a   6     // 0 = off, 1 = on  555 #2 main oscillator 
#define CTRL2b   7     // 0 = off, 1 = on  555 #2 sub oscillator 1

#define CTRL2c   0     // 0 = off, 1 = on  555 #2 sub oscillator 2
#define upDn     1     // 0 = down, 1 = up direction for digital pot increments
#define nINC     2     // advance digital pot wiper in set direction
#define nCS1     3     // chip select digital pot 555 #1 frequency 
#define nCS2     4     // chip select digital pot 555 #1 control voltage
#define nCS3     5     // chip select digital pot 555 #2 frequency
#define nCS4     6     // chip select digital pot 555 #2 control voltage 
#define nCS5     7     // chip select digital pot output level control

void setup() {

  Serial.begin(9600);

  Wire.begin();        // prepare for I2C communication

  // initialize PCF8574's and disconnect all audio sources from mixer inputs to start
  // configure 555 #2 for astable mode, and keep digital pots on standby for commands
  gpioBank1.begin(0x02); // 555 #2 configured as astable osc, all osc outputs disconnected from mixer inputs
  gpioBank2.begin(0xFC); // digital pots on standby,          all osc outputs disconnected from mixer inputs

  // set potentiometer wiper starting positions while audio paths are disabled
  movePotWiperToPos(90, nCS5);    // output level pot
  movePotWiperToPos(50, nCS1);    // 555 #1 frequency pot
  movePotWiperToPos(50, nCS2);    // 555 #1 cv pot
  movePotWiperToPos(50, nCS3);    // 555 #2 frequency pot
  movePotWiperToPos(50, nCS4);    // 555 #2 cv pot

  randomSeed(analogRead(0));      // init random number seed for random tone generation

}

void loop() {

  Serial.println();

  octave_demo();                  // turn on sub octave oscillators along with main osc
  delay(500);

  drone();                        // simple melody with droning background
  delay(500);

  tremolo();                      // tremolo volume swells
  delay(500);

  rise_stall();                   // rising octaves running into trouble
  delay(500);

  bleeps_bloops();                // play random fast tones
  delay(500);

  spaceship_takeoff();            // spaceship revving up and smacking into a mountain
  delay(500);

  rising_tone();                  // simple rising tone
  delay(500);

  laser_shot();                   // bang-BANG!
  delay(500);

  deflection();                   // things pinging off of stuff
  delay(500);

  rising_octave();                // rising tones adding in octaves
  delay(500);

  slide_drop();                   // sliding and dropping
  delay(500);

}


/*---------------------------------------- noise making functions -------------------------------*/

// random bleeps & bloops
// alternately generated between two 555's
void bleeps_bloops()
{
  Serial.print("Bleeps & Bloops...");
  for (int cnt = 0; cnt <= 20; cnt++ )
  {
    gpioBank1.write(CTRL1a, HIGH);            // enable 555 #1 main osc
    Serial.print(char(random(33, 48)));       // print out a random shift_number character
    delay(10);
    gpioBank1.write(CTRL2b, LOW);             // disable 555 #2 sub osc 1
    movePotWiperToPos(random(0, 100), nCS3);  // select a new 555 #2 freq.
    gpioBank1.write(CTRL2b, HIGH);            // enable 555 #2 sub osc 1
    Serial.print(char(random(33, 48)));       // print out a random shift_number character
    delay(10);
    gpioBank1.write(CTRL1a, LOW);             // disable 555 #1 main osc
    movePotWiperToPos(random(0, 100), nCS1);  // select a new 555 #1 freq.
  }
  gpioBank1.write(CTRL2b, LOW);               // disable 555 #2 sub osc 1
  Serial.println();
}

void drone()
{
  Serial.print("Droning octaves...");

  movePotWiperToPos(0, nCS1);                  // set 555 #1 freq.
  gpioBank1.write(CTRL1b, HIGH);               // turn on 555 #1 sub octave 1
  gpioBank1.write(CTRL1c, HIGH);               // turn on 555 #1 sub octave 2

  for (int cnt = 0; cnt < 20; cnt++ )          // sweep tone at certain speed for certain # pot increments
  {
    trimPotWiper(1, 1,  nCS1);
    delay(50);
    Serial.print(".");
  }
  gpioBank1.write(CTRL1b, LOW);                // turn off 555 #1 sub octave 1

  movePotWiperToPos(0, nCS3);                  // 555 #2 frequency pot
  gpioBank1.write(CTRL2b, HIGH);               // turn on 555 #2 sub octave 1
  gpioBank2.write(CTRL2c, HIGH);               // turn on 555 #2 sub octave 2
  delay(300);
  movePotWiperToPos(10, nCS3);                 // 555 #2 freq. adj. to play melody
  delay(300);
  movePotWiperToPos(30, nCS3);    
  delay(300);
  movePotWiperToPos(20, nCS3);    
  delay(300);
  movePotWiperToPos(25, nCS3);    
  delay(600);

  movePotWiperToPos(20, nCS3);    
  delay(300);
  movePotWiperToPos(10, nCS3);    
  delay(300);
  movePotWiperToPos(0, nCS3);    
  delay(600);

  movePotWiperToPos(10, nCS3);    
  delay(600);

  for (int cnt = 0; cnt < 15; cnt++ )           // sweep tone at certain speed for certain # pot increments
  {
    trimPotWiper(1, 0,  nCS3);
    delay(50);
  }

  // disable 555 #2 oscillators
  gpioBank1.write(CTRL2b, LOW);
  gpioBank2.write(CTRL2c, LOW);

  // enable 555 #1 sub osc 1
  gpioBank1.write(CTRL1b, HIGH);
  movePotWiperToPos(10, nCS1);                  // 555 #1 frequency pot

  delay(600);

  // disable 555 #1 sub oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);

  Serial.println();
}

void tremolo()
{
  Serial.print("Tremolo...");
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);

  for (int cnt = 0; cnt < 30; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(30);
    Serial.print(".");
  }


  for (int i = 0; i < 7; i++ ) // volume down
  {
    Serial.print(char(168));
    for (int cnt = 0; cnt < 30; cnt++ ) // volume down
    {
      trimPotWiper(1, 0,  nCS5);
      delay(2);
    }
    Serial.print("?");
    for (int cnt = 0; cnt < 30; cnt++ ) // volume up
    {
      trimPotWiper(1, 1,  nCS5);
      delay(5);
    }
  }
  delay(300);

  for (int cnt = 0; cnt < 30; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 0,  nCS1);
    delay(30);
    Serial.print(".");
  }

  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  movePotWiperToPos(90, nCS5);    // level pot

  Serial.println();
}

void slide_drop()
{
  Serial.print("Sliding and dropping...");
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);

  for (int cnt = 0; cnt < 40; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(10);
  }

  delay(400);

  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);

  for (int i = 0; i < 6; i++)
  {
    Serial.print("whoa...");
    movePotWiperToPos(20, nCS2);    // 555 #1 cv pot

    for (int j = 0; j < 40; j++)
    {
      trimPotWiper(1, 1,  nCS2);    // 555 #1 cv pot
      delay(1);
    }
    delay(1);
  }
  delay(100);

  Serial.print("BOOM!");
  movePotWiperToPos(60, nCS2);    // 555 #1 cv pot

  for (int i = 0; i < 30; i++)
  {
    trimPotWiper(1, 0,  nCS1);    // 555 #1 freq pot
    delay(10);
  }


  movePotWiperToPos(50, nCS2);    // 555 #1 cv pot

  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);

  Serial.println();
}

void rising_tone()
{
  Serial.print("Simple rising tone...");
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot

  Serial.print("______");
  for (int cnt = 0; cnt < 33; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(20);
  }

  gpioBank1.write(CTRL1b, HIGH);   // enable 555 #1 sub osc 1
  Serial.print("^^^^^^");
  for (int cnt = 0; cnt < 20; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(20);
  }

  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);

  Serial.println();
}

void rising_octave()
{
  Serial.print("Rising tone adding octaves...");
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc

  Serial.print("1...");
  for (int cnt = 0; cnt < 50; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(30);
  }

  Serial.print("2...");
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot
  gpioBank1.write(CTRL1b, HIGH);

  for (int cnt = 0; cnt < 50; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(40);
  }

  Serial.print("3...");
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot
  gpioBank1.write(CTRL1c, HIGH);

  for (int cnt = 0; cnt < 50; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(50);
  }

  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);

  Serial.println();
}


void deflection()
{
  Serial.print("Something deflecting off something...");
  movePotWiperToPos(20, nCS1);    // 555 #1 frequency pot
  movePotWiperToPos(50, nCS2);    // 555 #1 cv pot
  gpioBank1.write(CTRL1b, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1c, HIGH);

  for (int cnt = 0; cnt < 50; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 1,  nCS1);
    delay(7);
  }

  for (int cnt = 0; cnt < 2; cnt++ ) // sweep tone at certain speed for certain time
  {
    Serial.print("ping...");
    delay(20);
    movePotWiperToPos(10, nCS2);    // 555 #1 cv pot
    gpioBank1.write(CTRL1b, LOW);   // disable 555 #1 oscillators
    gpioBank1.write(CTRL1c, LOW);
    delay(50);
    gpioBank1.write(CTRL1b, HIGH);   // enable 555 #1 main osc
    gpioBank1.write(CTRL1c, HIGH);
    for (int j = 0; j < 10; j++)
    {
      trimPotWiper(1, 1,  nCS2);    // 555 #1 cv pot
      delay(10);
    }
    movePotWiperToPos(60, nCS2);    // 555 #1 cv pot
  }
  Serial.print("ping...");
  delay(100);
  Serial.print("thwack");

  for (int cnt = 0; cnt < 50; cnt++ ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 0,  nCS1);
    delay(10);
  }

  gpioBank1.write(CTRL1b, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1c, LOW);

  Serial.println();
}


void laser_shot()
{
  Serial.print("\"Laser\" pea shooter...");

  for (int i = 0; i < 4; i++)
  {
    Serial.print("pew...");
    movePotWiperToPos(70, nCS1);    // 555 #1 frequency pot
    gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
    movePotWiperToPos(90, nCS1);    // 555 #1 frequency pot
    for (int cnt = 0; cnt < 50; cnt++ ) // sweep tone at certain speed for certain time
    {
      trimPotWiper(1, 0,  nCS1);
      delay(3);
    }

    for (int cnt = 0; cnt < 10; cnt++ ) // sweep tone at certain speed for certain time
    {
      trimPotWiper(1, 0,  nCS1);
      delay(7);
    }

    gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillator
  }

  Serial.println();
}

void spaceship_takeoff()
{
  Serial.print("Spaceship-->");
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  movePotWiperToPos(90, nCS1);    // 555 #1 frequency pot
  Serial.print("whoosh! ");
  for (int cnt = 90; cnt >= 10; cnt-- ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 0,  nCS1);
    delay(3);
  }

  for (int cnt = 10; cnt <= 99; cnt++ )
  {
    Serial.print("^");
    movePotWiperToPos(cnt, nCS1);    // 555 #1 frequency pot
    delay(6);
  }

  Serial.print(">|splat!");
  movePotWiperToPos(39, nCS1);    // 555 #1 frequency pot
  for (int cnt = 39; cnt >= 1; cnt-- ) // sweep tone at certain speed for certain time
  {
    trimPotWiper(1, 0,  nCS1);
    delay(5);
  }
  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 main osc

  Serial.println();
}

void octave_demo()
{
  Serial.print("Turning on sub octaves...1.");
  movePotWiperToPos(0, nCS1);   // 555 #1 frequency pot
  gpioBank1.write(CTRL1a, HIGH);  // enable 555 #1 main osc
  delay (300);
  Serial.print(".");
  gpioBank1.write(CTRL1b, HIGH);  // enable 555 #1 sub osc 1
  delay (300);
  Serial.print(".");
  gpioBank1.write(CTRL1c, HIGH);  // enable 555 #1 sub osc 2
  delay (300);
  Serial.print(".");
  trimPotWiper(10, 1,  nCS1);    // 555 #1 frequency pot
  delay (900);

  gpioBank1.write(CTRL1a, LOW);   // disable channels
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  delay (300);

  Serial.print("2.");
  movePotWiperToPos(25, nCS1);   // 555 #1 frequency pot
  gpioBank1.write(CTRL1a, HIGH);  // enable 555 #1 main osc
  delay (300);
  Serial.print(".");
  gpioBank1.write(CTRL1b, HIGH);  // enable 555 #1 sub osc 1
  delay (300);
  Serial.print(".");
  gpioBank1.write(CTRL1c, HIGH);  // enable 555 #1 sub osc 2
  delay (300);
  Serial.print(".");
  trimPotWiper(7, 1,  nCS1);   // 555 #1 frequency pot
  delay (900);

  gpioBank1.write(CTRL1a, LOW);   // disable channels
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  delay (300);

  Serial.print("3.");
  movePotWiperToPos(10, nCS3);   // 555 #2 frequency pot
  gpioBank1.write(CTRL2a, HIGH);  // enable 555 #2 main osc
  delay (300);
  Serial.print(".");
  gpioBank1.write(CTRL2b, HIGH);  // enable 555 #2 sub osc 1
  delay (300);
  Serial.print(".");
  gpioBank2.write(CTRL2c, HIGH);  // enable 555 #2 sub osc 2
  delay (300);
  Serial.print(".");
  trimPotWiper(9, 1,  nCS3);    // 555 #2 frequency pot
  delay (900);

  gpioBank1.write(CTRL2a, LOW);   // disable channels
  gpioBank1.write(CTRL2b, LOW);
  gpioBank2.write(CTRL2c, LOW);

  Serial.println();
}

void rise_stall()
{
  Serial.print("Rising octaves stalling out...");
  movePotWiperToPos(0, nCS1);    // 555 #1 frequency pot
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);

  Serial.print("r");
  for (int cnt = 0; cnt < 25; cnt++ ) // sweep tone at certain speed for certain time
  {
    Serial.print("r");
    trimPotWiper(1, 1,  nCS1);
    delay(40);
  }
  Serial.print("...RRRRRRR...");
  delay(400);

  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  delay(50);
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);

  for (int i = 0; i < 3; i++)
  {
    Serial.print("vroom...");
    movePotWiperToPos(20, nCS2);    // 555 #1 cv pot

    for (int j = 0; j < 40; j++)
    {
      trimPotWiper(1, 1,  nCS2);    // 555 #1 cv pot
      delay(10);
    }
    delay(30);
  }
  delay(100);

  movePotWiperToPos(60, nCS2);    // 555 #1 cv pot
  Serial.print("uh...");
  delay(80);
  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  delay(30);
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);
  Serial.print("uh...");
  delay(80);
  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  delay(30);
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);
  Serial.print("uh...");
  delay(150);
  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);
  delay(30);
  gpioBank1.write(CTRL1a, HIGH);   // enable 555 #1 main osc
  gpioBank1.write(CTRL1b, HIGH);
  gpioBank1.write(CTRL1c, HIGH);
  Serial.print("HUH...");
  delay(600);

  for (int i = 0; i < 30; i++)
  {
    trimPotWiper(1, 0,  nCS1);    // 555 #1 freq pot
    delay(10);
  }


  movePotWiperToPos(50, nCS2);    // 555 #1 cv pot

  gpioBank1.write(CTRL1a, LOW);   // disable 555 #1 oscillators
  gpioBank1.write(CTRL1b, LOW);
  gpioBank1.write(CTRL1c, LOW);

  Serial.println();
}

/*---------------------------------------- digital pot functions -------------------------------*/

// move a selected potentiometer's wiper a number of steps up or down
void movePotWiper(int steps, byte dir, byte nCS)
{
  int i = (steps > 99) ? 99 : steps;       // must move wiper at least 1 step and no more than 99 steps
  if (i < 1) return;

  gpioBank2.write(upDn, dir);              // set increment direction
  gpioBank2.write(nCS, LOW);               // select target pot
  delayMicroseconds(1);                    // delay >=100nS between nCS and nINC
  while (i--) {
    gpioBank2.write(nINC, LOW);            // move wiper by requested # of steps
    delayMicroseconds(1);                  // nINC must hold state >=1uS
    gpioBank2.write(nINC, HIGH);
    delayMicroseconds(1);
  }
  delayMicroseconds(100);                  // delay >=100uS for wiper to change position

  gpioBank2.write(nINC, LOW);
  delayMicroseconds(1);
  gpioBank2.write(nCS, HIGH);              // de-select chip without saving wiper position in nvm
  delayMicroseconds(1);
  gpioBank2.write(nINC, HIGH);
}

// move a pot's wiper to a specific position from 0-99
// first move the pot all the way to one end, then count steps to target position
// there is no way to read the wiper position
void movePotWiperToPos(int pos, byte nCS)
{
  int i = (pos > 99) ? 99 : pos;           // wiper position can be 0 to 99
  if (i < 0) i = 0;

  movePotWiper(99, 0, nCS);                // move wiper to a known position (end of travel at low terminal)
  movePotWiper(pos, 1, nCS);               // move wiper to intended position from 0-99
}

// move a pot's wiper by a specific number of steps in a certain direction
// this is a relative move, useful when an adjustment is required
// without moving the wiper all the way to one end and back
void trimPotWiper(int steps, byte dir, byte nCS)
{
  int i = (steps > 99) ? 99 : steps;       // wiper can move 1 to 99 steps
  if (i < 1) return;

  movePotWiper(steps, dir, nCS);           // move wiper requested number of steps/direction
}
